DROP TABLE ENGAGEMENT_TYPE CASCADE CONSTRAINTS;
DROP TABLE RISK_PROFILE CASCADE CONSTRAINTS;
DROP TABLE QUESTIONS CASCADE CONSTRAINTS;
DROP TABLE ASSET_OBJECTIVES CASCADE CONSTRAINTS;
DROP TABLE CUSTOMERS CASCADE CONSTRAINTS;
DROP TABLE ENGAGEMENT_FREQUENCY CASCADE CONSTRAINTS;
DROP TABLE CUSTOMER_ENGAGEMENT_PREFERENCES CASCADE CONSTRAINTS;
DROP TABLE CUSTOMER_FUNDS CASCADE CONSTRAINTS;
DROP TABLE FUND_ASSETS CASCADE CONSTRAINTS;
DROP TABLE POTENTIAL_FUNDS CASCADE CONSTRAINTS;
DROP TABLE FUND_TARGETS CASCADE CONSTRAINTS;
DROP TABLE ASSET_CLASSES CASCADE CONSTRAINTS;
DROP TABLE CUSTOMER_ANSWERS CASCADE CONSTRAINTS;
DROP TABLE ANSWERS CASCADE CONSTRAINTS;
DROP TABLE CUSTOMER_ASSETS CASCADE CONSTRAINTS;

CREATE TABLE CUSTOMERS
(
    CUSTOMER_ID NUMBER,
    CONTACT_LAST_NAME VARCHAR2(100),
    CONTACT_FIRST_NAME VARCHAR2(100),
    STREET VARCHAR2(100),
    CITY VARCHAR2(50),
    CUST_STATE VARCHAR2(50),
    ZIP VARCHAR2(10),
    COUNTRY VARCHAR2(50),
    AGE NUMBER,
    MARITAL_STATUS VARCHAR2(20),
    GENDER VARCHAR2(10),
    NUM_DEPENDANTS NUMBER,
    CONSTRAINT CUST_PK PRIMARY KEY(CUSTOMER_ID)
);

CREATE TABLE ASSET_OBJECTIVES(
    ASSET_OBJECTIVE_ID NUMBER,
    ASSET_OBJECTIVE_NAME VARCHAR2(30),
    CONSTRAINT ASSET_OBJ_PK PRIMARY KEY(ASSET_OBJECTIVE_ID)
);

CREATE TABLE QUESTIONS(
    QUESTION_ID NUMBER,
    QUESTION_SUBJECT VARCHAR2(100),
    QUESTION_TEXT VARCHAR2(500),
    CONSTRAINT QUESTION_PK PRIMARY KEY(QUESTION_ID)
);

CREATE TABLE RISK_PROFILE (
    RISK_PROFILE_ID   NUMBER(10)    CONSTRAINT PK_RISK_PROFILE PRIMARY KEY,
    RISK_PROFILE      VARCHAR2(50)  NOT NULL
);

CREATE TABLE ENGAGEMENT_TYPE (
    ENGAGEMENT_TYPE_ID   NUMBER(10)    CONSTRAINT PK_ENGAGEMENT_TYPE PRIMARY KEY,
    ENGAGEMENT_TYPE_NAME VARCHAR2(100) NOT NULL
);

CREATE TABLE ENGAGEMENT_FREQUENCY (
    FREQUENCY_ID   NUMBER(10)    CONSTRAINT PK_FREQUENCY PRIMARY KEY,
    FREQUENCY_NAME VARCHAR2(50)  NOT NULL
);

CREATE TABLE CUSTOMER_ASSETS ( 
    CUSTOMER_ASSET_ID NUMBER(10) CONSTRAINT PK_CUSTOMER_ASSETS PRIMARY KEY, 
    CUSTOMER_ID NUMBER(10) CONSTRAINT FK_CA_CUSTOMER REFERENCES CUSTOMERS(CUSTOMER_ID) NOT NULL, 
    ASSET_OBJECTIVE_ID NUMBER(10) CONSTRAINT FK_CA_ASSET_OBJECTIVE REFERENCES ASSET_OBJECTIVES(ASSET_OBJECTIVE_ID) NOT NULL, 
    TOTAL NUMBER(18,2) NOT NULL 
);

CREATE TABLE ANSWERS (
    QA_ID NUMBER,
    QUESTION_ID NUMBER,
    ANSWER_ID NUMBER,
    ANSWER_TEXT VARCHAR2(500),
    RISK_PROFILE_ID NUMBER,
    CONSTRAINT QA_PK PRIMARY KEY (QA_ID),
    CONSTRAINT RISK_PROFILE_FK FOREIGN KEY(RISK_PROFILE_ID) REFERENCES RISK_PROFILE(RISK_PROFILE_ID)
);

CREATE TABLE CUSTOMER_ANSWERS(
    CUSTOMER_ID   NUMBER(10) CONSTRAINT FK_CR_CUSTOMER 
                      REFERENCES CUSTOMERS(CUSTOMER_ID) NOT NULL,
    QA_ID NUMBER CONSTRAINT QA_FK REFERENCES ANSWERS(QA_ID)
);

CREATE TABLE ASSET_CLASSES(
    ASSET_CLASS_ID NUMBER,
    ASSET_CLASS VARCHAR2(20),
    FLAT_FEE NUMBER,
    PERCENTAGE_FEE NUMBER,
    RISK_PROFILE_ID NUMBER,
    CONSTRAINT ASSET_CLASS_PK PRIMARY KEY(ASSET_CLASS_ID),
    CONSTRAINT RISK_PROFILE_FK2 FOREIGN KEY(RISK_PROFILE_ID) REFERENCES RISK_PROFILE(RISK_PROFILE_ID)
);

CREATE TABLE POTENTIAL_FUNDS (
    FUND_ID                     NUMBER(10)    CONSTRAINT PK_POTENTIAL_FUNDS PRIMARY KEY,
    FUND_NAME                   VARCHAR2(100) NOT NULL,
    FUND_DESCRIPTION            VARCHAR2(500),
    MINIMUM_INVESTMENT_REQUIRED NUMBER(18,2)  NOT NULL,
    MAXIMUM_INVESTMENT_ALLOWED  NUMBER(18,2)  NOT NULL
);
CREATE TABLE FUND_TARGETS (
    FUND_TARGET_ID              NUMBER(10)    CONSTRAINT PK_FUND_TARGETS PRIMARY KEY,
    FUND_ID                     NUMBER(10)    NOT NULL,
    ASSET_OBJECTIVE_ID          NUMBER(10)    CONSTRAINT FK_FT_ASSET_OBJECTIVE 
                                                  REFERENCES ASSET_OBJECTIVES(ASSET_OBJECTIVE_ID),
    ENGAGEMENT_TYPE_ID          NUMBER(10)    CONSTRAINT FK_PF_ENGAGEMENT_TYPE 
                                                  REFERENCES ENGAGEMENT_TYPE(ENGAGEMENT_TYPE_ID),
    FREQUENCY_ID                NUMBER(10)    CONSTRAINT FK_PF_FREQUENCY 
                                                  REFERENCES ENGAGEMENT_FREQUENCY(FREQUENCY_ID),
    TARGET_DESCRIPTION          VARCHAR2(500) 
);
CREATE TABLE FUND_ASSETS (
    FUND_ASSET_ID NUMBER,
    FUND_ID NUMBER,
    ASSET_CLASS_ID NUMBER,
    PERCENT_OF_FUND NUMBER,
    CONSTRAINT FUND_ASSET_PK PRIMARY KEY (FUND_ASSET_ID),
    CONSTRAINT FUND_FK FOREIGN KEY (FUND_ID) REFERENCES POTENTIAL_FUNDS(FUND_ID),
    CONSTRAINT ASSET_CLASS_FK FOREIGN KEY (ASSET_CLASS_ID) REFERENCES ASSET_CLASSES(ASSET_CLASS_ID)
);

CREATE TABLE CUSTOMER_FUNDS(
    CUSTOMER_ID       NUMBER(10) CONSTRAINT FK_CFI_CUSTOMER 
                               REFERENCES CUSTOMERS(CUSTOMER_ID) NOT NULL,
    FUND_ID           NUMBER(10) CONSTRAINT FK_CFI_FUND 
                               REFERENCES POTENTIAL_FUNDS(FUND_ID) NOT NULL,
    AMOUNT_INVESTED   NUMBER(18,2) NOT NULL
);

CREATE TABLE CUSTOMER_ENGAGEMENT_PREFERENCES (
    CUSTOMER_ID        NUMBER(10) CONSTRAINT FK_CE_CUSTOMER 
                                   REFERENCES CUSTOMERS(CUSTOMER_ID) NOT NULL,
    ENGAGEMENT_TYPE_ID NUMBER(10) CONSTRAINT FK_CE_ENGAGEMENT_TYPE 
                                   REFERENCES ENGAGEMENT_TYPE(ENGAGEMENT_TYPE_ID) NOT NULL,
    FREQUENCY_ID       NUMBER(10) CONSTRAINT FK_CE_FREQUENCY 
                                   REFERENCES ENGAGEMENT_FREQUENCY(FREQUENCY_ID) NOT NULL
);







SELECT 
    c.marital_status,
    CASE 
        WHEN c.age BETWEEN 40 AND 60 THEN '40-60'
        WHEN c.age BETWEEN 45 AND 60 THEN '45-60'
        WHEN c.age BETWEEN 60 AND 80 THEN '60-80'
        ELSE 'OTHER'
    END AS age_group,

    COUNT(DISTINCT c.customer_id) AS customer_count,   -- unique customers
    COUNT(a.risk_profile_id) AS total_responses,       -- total answered questions

    -- Counts per risk profile
    SUM(CASE WHEN a.risk_profile_id = 1 THEN 1 ELSE 0 END) AS low_cnt,
    SUM(CASE WHEN a.risk_profile_id = 2 THEN 1 ELSE 0 END) AS below_avg_cnt,
    SUM(CASE WHEN a.risk_profile_id = 3 THEN 1 ELSE 0 END) AS avg_cnt,
    SUM(CASE WHEN a.risk_profile_id = 4 THEN 1 ELSE 0 END) AS above_avg_cnt,
    SUM(CASE WHEN a.risk_profile_id = 5 THEN 1 ELSE 0 END) AS high_cnt,

    -- Percentages (avoid divide by zero)
    COALESCE(ROUND(SUM(CASE WHEN a.risk_profile_id = 1 THEN 1 ELSE 0 END) * 100.0 / NULLIF(COUNT(a.risk_profile_id), 0), 2), 0) AS low_pct,
    COALESCE(ROUND(SUM(CASE WHEN a.risk_profile_id = 2 THEN 1 ELSE 0 END) * 100.0 / NULLIF(COUNT(a.risk_profile_id), 0), 2), 0) AS below_avg_pct,
    COALESCE(ROUND(SUM(CASE WHEN a.risk_profile_id = 3 THEN 1 ELSE 0 END) * 100.0 / NULLIF(COUNT(a.risk_profile_id), 0), 2), 0) AS avg_pct,
    COALESCE(ROUND(SUM(CASE WHEN a.risk_profile_id = 4 THEN 1 ELSE 0 END) * 100.0 / NULLIF(COUNT(a.risk_profile_id), 0), 2), 0) AS above_avg_pct,
    COALESCE(ROUND(SUM(CASE WHEN a.risk_profile_id = 5 THEN 1 ELSE 0 END) * 100.0 / NULLIF(COUNT(a.risk_profile_id), 0), 2), 0) AS high_pct

FROM customers c
LEFT JOIN customer_answers ca ON c.customer_id = ca.customer_id
LEFT JOIN answers a ON ca.qa_id = a.qa_id
WHERE c.age BETWEEN 40 AND 80  -- only consider relevant age ranges
GROUP BY c.marital_status,
    CASE 
        WHEN c.age BETWEEN 40 AND 60 THEN '40-60'
        WHEN c.age BETWEEN 45 AND 60 THEN '45-60'
        WHEN c.age BETWEEN 60 AND 80 THEN '60-80'
        ELSE 'OTHER'
    END
ORDER BY c.marital_status, age_group;

select count(*) from customer_answers where qa_id is null;

SELECT 
    c.marital_status,
    ao.asset_objective_name,
    COUNT(DISTINCT ca.customer_id) AS customer_count,
    COUNT(ca.customer_asset_id) AS asset_records,
    SUM(ca.total) AS total_asset_value,
    ROUND(AVG(ca.total), 2) AS avg_asset_value,
    RANK() OVER (
        ORDER BY AVG(ca.total) DESC
    ) AS avg_asset_rank
FROM customers c
JOIN customer_assets ca 
    ON c.customer_id = ca.customer_id
JOIN asset_objectives ao
    ON ca.asset_objective_id = ao.asset_objective_id
WHERE c.marital_status IS NOT NULL
GROUP BY 
    c.marital_status,
    ao.asset_objective_name
ORDER BY 
    c.marital_status,
    avg_asset_rank;